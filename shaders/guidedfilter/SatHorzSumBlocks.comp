#version 430

layout(local_size_x=64, local_size_y=1) in;
layout(std430, binding=0) buffer inputBuffer {
	float input[];
};
layout(std430, binding=1) buffer satBuffer {
	float sat[];
};

uniform uint width;

shared float localSums[128];

void main()
{
	uint gidX0 = gl_GlobalInvocationID.x * 2;
	uint gidX1 = gl_GlobalInvocationID.x * 2 + 1;
	uint lid = gl_LocalInvocationID.x;
	uint row = gl_GlobalInvocationID.y;

	//Each thread loads two items and stores them in local memory.
	float in0, in1;
	if(gidX0 < width) in0 = input[gidX0 + row*width];
	else in0 = 0.0;
	if(gidX1 < width) in1 = input[gidX1 + row*width];
	else in1 = 0.0;

	localSums[lid*2] = in0;
	localSums[lid*2+1] = in1;

	//Up-sweep
	uint offset = 1;
	uint d;

	for(d = 128; d > 0; d >>= 1) {
		barrier();
		if(lid < d) {
			uint ai = (2 * lid + 1) * offset - 1;
			uint bi = (2 * lid + 2) * offset - 1;
			localSums[bi] += localSums[ai];
		}
		offset <<= 1;
	}

	barrier();

	//Down-sweep
	for (d = 1; d <= 128; d <<= 1) {
		offset >>= 1;
		barrier();

		if (lid < d) {
			uint ai = (2 * lid + 1) * offset - 1;
			uint bi = (2 * lid + 2) * offset - 1;

			float tmp = localSums[ai];
			localSums[ai] = localSums[bi];
			localSums[bi] += tmp;
		}
	}

	barrier();
	if(gidX0 < width) sat[gidX0 + row*width] = localSums[lid*2 + 0] + in0;
	if(gidX1 < width) sat[gidX1 + row*width] = localSums[lid*2 + 1] + in1;

}

